/*
A left rotation operation on an array of size n shifts each of the array's elements 1 unit to the left. For
example, if 2 left rotations are performed on array [1, 2, 3, 4, 5], then the array would become [3, 4, 5, 1, 2].
Given an array of n integers and a number, d, perform d left rotations on the array. Then print the updated
array as a single line of space-separated integers.

Input Format
The first line contains two space-separated integers denoting the respective values of n (the number of
integers) and d (the number of left rotations you must perform).
The second line contains n space-separated integers describing the respective elements of the array's initial
state.

Constraints
1 <= n <= 10^5
1 <= d <= n
1 <= a[i] <= 10^6

Output Format
Print a single line of n space-separated integers denoting the final state of the array after performing d left
rotations.
*/

#include <bits/stdc++.h>

using namespace std;

vector <int> leftRotation(vector <int> a, int d) {
    vector<int> b = a; //assign vector to parameter
    
    for(int i = 0; i < a.size(); i++) { //temporary vector is assigned to parameter vector's value plus rotations mod size
        b[i] = a[(i + d) % a.size()];
    }
    return b; //return temporary vector
}

int main() {
    int n;
    int d;
    cin >> n >> d;
    vector<int> a(n);
    for(int a_i = 0; a_i < n; a_i++){ //input array data
       cin >> a[a_i];
    }
    vector <int> result = leftRotation(a, d); //call function and assign result into vector
    for (ssize_t i = 0; i < result.size(); i++) {
        cout << result[i] << (i != result.size() - 1 ? " " : ""); //output result and a space if there are more array values
    }
    cout << endl;

    return 0;
}
